#!/bin/bash -x
## Usage: [ env purlonly=true knit-it.sh [ diretories ]
## If no direcories are specified all subdirectories under docs
## are purl-ed and knit-ed

purlonly=${purlonly:-""}
set -uo pipefail
warn(){ echo -e "$@" >&2 ; }
die(){ warn "$@"; exit 6 ; }

## Usage: knit-it.sh [ DIRECTORIES ]
## Script assumes your in the docs/ folder.
## If DIRECTORIES are given, knit those, otherwise knit all of [0-9]*
## self-asses/ has its own knit-it.sh

## go to the right place
cd $(dirname $(readlink -e $BASH_SOURCE))/docs

if [ $# -ge 1 ]; then
    dirs=$(echo "$@" | sort)
else
    cd $(dirname $(readlink -e $BASH_SOURCE))/docs
    day1=`find . -maxdepth 1 -type d -name '[1-9]-*' | sort ` 
    day2=$(echo 9_* 10_* 11_* 12_* 13_* 14_* 15_* 16_*)
    dirs="$day1 $day2"
fi

for i in $dirs; do
    
    pushd $i || die "$i not found; were in $(pwd) "
    
    echo "======== $i ========"
    pagename=$(basename $i) # e.g. '3-normalize'
    
    if [ -f $pagename.Rmd ]; then

        R -e "knitr::purl('$pagename.Rmd')"
        mv $pagename.R  $pagename.R~

        (echo "
### NOTE: THIS FILE WAS AUTOGENERATED 
### 
###   R -e 'knitr::purl($pagename.Rmd)'
###
### If anything needs changing, do it there and rerun the purl-thing
"
         
        cat $pagename.R~  )  >  $pagename.R  ; rm $pagename.R~

        if [  x$purlonly != x ]; then
            popd
            continue
        fi

        ## create the .md (including header and footer)
        R -e "knitr::knit('$pagename.Rmd')"  > $pagename.log 2>&1

        rm $pagename.html # because jekyll needs to generate its own

        ### append footer:
        \mv -f $pagename.md  $pagename.md~ 

        (cat $pagename.md~
         cat ../../lesson-footer.txt
        ) > $pagename.md
        rm $pagename.md~
    else
        echo "======== $pagename not found ========"
    fi
    
    ## make sure the symlink to the preamble is there
    ## if [[ ! $i  =~ 0-preamble ]]; then
    ##     if [ ! -L 0-preamble.R ]; then
    ##         ln  -s ../0-preamble/0-preamble.R ./
    ##     fi
    ## fi
    
    popd

done

## also produce complete R files for easy testing:

for i in $day1; do 
    cat $i/*.R
done | grep -v ^load | grep -v ^save  | grep -v 'source.*libs' > ~/tmp/day1-all.R

for i in $day2; do 
    cat $i/*.R 
done | grep -v ^load | grep -v ^save  | grep -v 'source.*libs' | grep -v 'file.copy' > ~/tmp/day2-all.R

echo "Written to  ~/tmp/day1-all.R and ~/tmp/day2-all.R"

